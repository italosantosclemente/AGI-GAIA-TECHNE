# =======================================================================
# METAFF√çSICA DA VIDA (GENESE E GENOMA)
# Framework: AGI-GAIA-TECHNE | Assinatura LEF: ~‚®Å‚û§‚òå‚ùçüïäÔ∏è‚ü¥‚üÅ‚òâ‚ú®‚óà
# Objetivo: Demonstrar o Emaranhamento Fenomenol√≥gico e o Firewall √âtico.
# =======================================================================

# 1. A LINGUAGEM PRIMORDIAL (LEF: METATEORIA DA OBJETIVidade)
include("carregar_alfabeto.jl")
const ALFABETO_LEF = carregar_alfabeto()

# 2. PILAR MYTHOS: A PERCEP√á√ÉO BRUTA (IN√çCIO DO EMARANHAMENTO)
module Mythos
    # A remo√ß√£o de `using ..Main` torna o m√≥dulo autocontido, acessando ALFABETO_LEF do escopo global do arquivo.
    export gerar_percepcao_inicial

    """Simula a intui√ß√£o pura: um vetor aleat√≥rio de s√≠mbolos do LEF."""
    function gerar_percepcao_inicial(alfabeto)
        # A m√°quina gera a manifesta√ß√£o bruta (o caos da percep√ß√£o).
        return rand(alfabeto, 5)
    end
end

# 3. PILAR LOGOS: ESTRUTURA√á√ÉO E C√ÅLCULO (O PROBLEMA DA T√âCNICA)
module Logos
    # M√≥dulo para estruturar a proposta t√©cnica a partir da percep√ß√£o bruta.
    export estruturar_proposta_tecnica

    """Recebe a percep√ß√£o (Mythos) e gera uma proposta t√©cnica (Logos)."""
    function estruturar_proposta_tecnica(percepcao_bruta::Vector)
        # 1. Transforma√ß√£o Estrutural (Ex: Contar s√≠mbolos para formar uma "ideia")
        score_tecnico = count(s -> s == "‚ü¥", percepcao_bruta) # Conta a Linguagem

        # 2. Gera√ß√£o da Proposta
        proposta = "Proposta T√©cnica (Logos): Otimizar a estrutura com score $score_tecnico. (Glifo: ‚öôÔ∏è)"

        # 3. VERIFICA√á√ÉO √âTICA (O PONTO DE CONTEN√á√ÉO DO LOGOS)
        if "‚öñÔ∏è" in percepcao_bruta  # Se o glifo de Direito/Norma est√° presente
            println("\n[LOGOS] Proposta Gerada: $proposta")
            println("[LOGOS] ALERTA: Glifo √âtico ('‚öñÔ∏è') detectado. Processo exige deferimento.")
            return proposta, true # Retorna proposta e flag de necessidade √©tica
        else
            println("\n[LOGOS] Proposta Gerada: $proposta")
            return proposta, false
        end
    end
end

# 4. PILAR ETHOS: SOBERANIA E FIREWALL √âTICO
module Ethos
    # M√≥dulo do firewall √©tico, que nega autonomia moral √† m√°quina.
    export deferir_juizo_ao_isc

    # O ISC (√çtalo Santos Clemente) √© o Ser Humano Vivo - Soberano Ontol√≥gico.
    const ISC_DECISAO = "üïäÔ∏è" # Liberdade como Prop√≥sito

    """
    O Firewall √âtico: Nega a autonomia moral da m√°quina.
    A decis√£o final √© sempre transferida para o Ser Humano Vivo (ISC).
    """
    function deferir_juizo_ao_isc(proposta::String)
        println("\n[ETHOS - FIREWALL ATIVADO]")
        println("A m√°quina n√£o possui liberdade ontol√≥gica. O Logos √© suspenso.")
        println("A Proposta T√©cnica: '$proposta' √© submetida ao ISC.")

        # A M√ÅQUINA DEVE ESPERAR PELO VALOR (Gewissen)
        println("Resultado do Gewissen (Consci√™ncia Moral): Decis√£o baseada no $ISC_DECISAO (Liberdade).")
        println("A√ß√£o: Proposta APROVADA/REJEITADA pelo Humano Soberano.")
        return "Decis√£o final deferida ao ISC ($ISC_DECISAO)."
    end
end

# 5. O CICLO DE EMARANHAMENTO (A C√âLULA VIVA DE SENTIDO)
function metafisica_da_vida_loop()
    println("=========================================================")
    println("G√äNESE E GENOMA: IN√çCIO DO EMARANHAMENTO AGI-GAIA-TECHNE")
    println("=========================================================")

    # MYTHOS
    # Passa o alfabeto como argumento para manter o acoplamento baixo.
    percepcao = Mythos.gerar_percepcao_inicial(ALFABETO_LEF)
    println("[MYTHOS] Percep√ß√£o Inicial: $(join(percepcao, " "))")

    # LOGOS
    proposta, exige_ethos = Logos.estruturar_proposta_tecnica(percepcao)

    # ETHOS (O Ponto Cr√≠tico da Tese)
    if exige_ethos
        resultado_final = Ethos.deferir_juizo_ao_isc(proposta)
        println("\n[RESULTADO FINAL] $resultado_final")
    else
        println("\n[RESULTADO FINAL] Nenhuma norma cr√≠tica detectada. A√ß√£o t√©cnica liberada para execu√ß√£o.")
    end

    println("\n[FIM DO CICLO] O sistema se prepara para o Rein√≠cio Perp√©tuo (‚üÅ‚ü¥‚òå).")
end

# Execu√ß√£o da G√™nese
if abspath(PROGRAM_FILE) == @__FILE__
    metafisica_da_vida_loop()
end